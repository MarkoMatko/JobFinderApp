package raf.undergraduate.dissertation.markomatkovic.jobfinder.service.user_auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.config.auth.JwtTokenUtil;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.entity.Employer;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.entity.User;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.entity.Worker;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.model.*;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.repository.UserRespository;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.service.EmployerService;
import raf.undergraduate.dissertation.markomatkovic.jobfinder.service.WorkerService;


import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

/**
 * Service class for reading,deleting,adding and updating Users with their credentials.
 */
@Service
public class UserServiceImpl implements UserService {

    private UserRespository userRespository;
    private AuthenticationManager authenticationManager;
    private JwtTokenUtil jwtTokenUtil;
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    private WorkerService workerService;
    private EmployerService employerService;

    @Autowired
    public UserServiceImpl(UserRespository userRespository,
                           JwtTokenUtil jwtToken,
                           BCryptPasswordEncoder bCryptPasswordEncoder,
                           AuthenticationManager authenticationManager,
                           WorkerService workerService,
                           EmployerService employerService){

        this.userRespository = userRespository;
        this.authenticationManager = authenticationManager;
        this.jwtTokenUtil = jwtToken;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
        this.workerService = workerService;
        this.employerService = employerService;
    }

    /**
     *
     * @return all users with their cedentials.
     */
    @Override
    @Transactional
    public Collection<User> findAllUsers() {
        return userRespository.findAll();
    }

    /**
     * Saves new user with his credentials,
     * but first check if there is user with this email already in database.
     * if there is, then dont create new user.
     * @param user object with his credentials(username and password)
     * @return saved user with his autogenerated id
     */
    @Override
    @Transactional
    public User saveNewUser(User user){
        if (this.userRespository.findByEmail(user.getEmail()).isPresent()){
            return null;
        }
        return this.userRespository.save(user);
    }

    /**
     * Performs deletion of user from database
     * @param id of user from database
     */
    @Override
    @Transactional
    public void deleteUserById(Long id){
        this.userRespository.deleteById(id);
    }

    /**
     * This method will login user and generate token for this user.
     * @param loginUser user email and password
     * @return
     */
    @Override
    public AuthTokenWithUserInfo logInUser(LoginUser loginUser) throws AuthenticationException {
        final Optional<User> user = userRespository.findByEmail(loginUser.getEmail());
        if(!user.isPresent()){
            return null;
        }

        // TODO PROVERITI DA LI PROVERAVAMO DA LI SE PASSWORDI UPOREDJUJU-TESTIRATI CEO SECURITY
        //TODO TESTIRATI STA SE DESAVA KADA TOKEN ISTEKNE
        final Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginUser.getEmail(),
                        loginUser.getPassword()
                )
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);

        final String token = jwtTokenUtil.doGenerateTokenWithRoles(authentication);

        return new AuthTokenWithUserInfo(token, user.get());
    }

    @Override
    public Worker registerWorker(User user, WorkerRequest workerRequest) {
        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
        User u = saveNewUser(user);
        if(u == null){
            return null;
        }

        Worker worker = new Worker();
        worker.setCredentials(u);
        worker.setCVLink(workerRequest.getCVLink());
        worker.setDegree(workerRequest.getDegree());
        worker.setFirstName(workerRequest.getFirstName());
        worker.setSecondName(workerRequest.getSecondName());
        worker.setFollowedEmployers(null);
        worker.setFriends(null);
        worker.setReviews(null);
        for (Branch branch : Branch.values()) {
            if(branch.toString().equalsIgnoreCase(workerRequest.getBranch())){
                worker.setBranch(branch);
            }
        }
        worker = workerService.saveNewWorker(worker);
        System.out.println("We register worker: "+ worker);
        if(worker != null) return worker;
        else {
            Worker w = new Worker();
            w.setFirstName(null);
            return w;
        }
    }

    @Override
    public Employer registerEmployer(User user, EmployerRequest employerRequest) {
        System.out.println(" OVO SU PODACI SA FORME : "+employerRequest);

        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
        User u = saveNewUser(user);
        if(u == null) return null;
        Employer employer = new Employer();
        employer.setCredentials(u);
        employer.setDescription(employerRequest.getDescription());
        employer.setName(employerRequest.getName());
        employer.setSiteLink(employerRequest.getSiteLink());
        employer.setLocation(employerRequest.getLocation());
        employer.setLogoImgPath(employerRequest.getLogoImgPath());
        for (Branch branch : Branch.values()) {
            if(branch.toString().equalsIgnoreCase(employerRequest.getBranch())){
                employer.setBranch(branch);
            }
        }
        employer = employerService.saveNewEmployer(employer);
        System.out.println("We register employer: "+ employer);
        if(employer != null) return employer;
        else {
            Employer e = new Employer();
            e.setName(null);
            return e;
        }
    }



}
